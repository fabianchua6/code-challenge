interface WalletBalance {
  currency: string;
  amount: number; // where to get amount from?
}
// missing blockchain variable in WalletBalance interface?

interface FormattedWalletBalance {
  currency: string;
  amount: number;
  formatted: string;
}
// can extend formatted walletbalance and use it?

class Datasource {
  // TODO: Implement datasource class
}

interface Props extends BoxProps {}
// BoxProps not defined in this file

const WalletPage: React.FC<Props> = (props: Props) => {
  const { children, ...rest } = props;
  // children does not exist in this file, probably because of BoxProps not extended
  const balances = useWalletBalances();
  // never declare hook to useWalletBalances
  const [prices, setPrices] = useState({});

  useEffect(() => {
    const datasource = new Datasource(
      'https://interview.switcheo.com/prices.json'
    );
    datasource
      .getPrices() // to implement getPrices in datasource class
      .then(prices => {
        setPrices(prices);
      })
      .catch(error => {
        console.err(error); // syntax error
      });
  }, []); // missing dependency array, might cause infinite renders

  const getPriority = (blockchain: any): number => {
    switch (blockchain) {
      case 'Osmosis':
        return 100;
      case 'Ethereum':
        return 50;
      case 'Arbitrum':
        return 30;
      case 'Zilliqa':
        return 20;
      case 'Neo':
        return 20;
      default:
        return -99;
    }
  };

  const sortedBalances = useMemo(() => {
    return balances
      .filter((balance: WalletBalance) => {
        const balancePriority = getPriority(balance.blockchain);
        if (lhsPriority > -99) {
          // what is lhsPriority?
          if (balance.amount <= 0) {
            // why showing balances that are negative?
            return true;
          }
        }
        return false;
      })
      .sort((lhs: WalletBalance, rhs: WalletBalance) => {
        const leftPriority = getPriority(lhs.blockchain);
        const rightPriority = getPriority(rhs.blockchain);
        if (leftPriority > rightPriority) {
          // highest priority on top
          return -1;
        } else if (rightPriority > leftPriority) {
          return 1;
        }
      });
  }, [balances, prices]);

  // function defined and not called
  const formattedBalances = sortedBalances.map((balance: WalletBalance) => {
    return {
      ...balance,
      formatted: balance.amount.toFixed(),
    };
  });

  // mistype as balances in sortedBalances are not formatted yet
  const rows = sortedBalances.map(
    (balance: FormattedWalletBalance, index: number) => {
      const usdValue = prices[balance.currency] * balance.amount;
      return (
        // need to implement walletRow component in table
        <WalletRow
          className={classes.row}
          key={index}
          amount={balance.amount}
          usdValue={usdValue}
          formattedAmount={balance.formatted}
        />
      );
    }
  );

  return <div {...rest}>{rows}</div>;
};
